using DesignPatternCodeGenerator.Base.Enums;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;

namespace DesignPatternCodeGenerator.Base.Generators
{
    internal static class BaseCodeGenerator
    {
        internal static string GenerateUsingsAndNamespace(IGrouping<string, TypeDeclarationSyntax> mainGroup)
            => $@"// <auto-generated/>
{GenerateUsings(mainGroup)}

namespace {BaseNamesGenerator.GetNamespace(mainGroup)}";

        internal static string GenerateUsingsAndNamespace(
            IGrouping<string, TypeDeclarationSyntax> mainGroup,
            IGrouping<string, TypeDeclarationSyntax> additionalGroupToUsings)
            => $@"// <auto-generated/>
{GenerateUsings(mainGroup)}
{GenerateAdditionalUsing(additionalGroupToUsings)}

namespace {BaseNamesGenerator.GetNamespace(mainGroup)}";

        internal static string GenerateDeclaration(
            IGrouping<string, TypeDeclarationSyntax> group,
            CodeType codeType,
            bool isMainAttributeOnInterface = false,
            bool isPartialClass = false,
            bool isDesignPatternPostfix = false)
        {
            switch (codeType)
            {
                case CodeType.Interface:
                    return GenerateInterfaceDeclaration(group, isDesignPatternPostfix);
                case CodeType.Class:
                    return GenerateClassDeclaration(group, isDesignPatternPostfix, isMainAttributeOnInterface, isPartialClass);
                case CodeType.Enum:
                    return GenerateEnumDeclaration(group, isDesignPatternPostfix, isMainAttributeOnInterface);
                default:
                    return "";
            }
        }

        private static string GenerateUsings(IGrouping<string, TypeDeclarationSyntax> group)
            => $@"{string.Join("\n", BaseNamesGenerator.GetUsings(group).Select(x => $"using {x};"))}";

        private static string GenerateAdditionalUsing(IGrouping<string, TypeDeclarationSyntax> group)
        {
            return $@"{string.Join("\n", $"using {BaseNamesGenerator.GetNamespace(group)};")}";
        }

        private static string GenerateInterfaceDeclaration(
            IGrouping<string, TypeDeclarationSyntax> group,
            bool isDesignPatternPostfix)
            => $"{BaseNamesGenerator.GetAccesibility(group)} interface {BaseNamesGenerator.GetInterfaceName(group, GeneratorAttributeType.Factory, isDesignPatternPostfix)}";

        private static string GenerateClassDeclaration(
            IGrouping<string, TypeDeclarationSyntax> group,
            bool isDesignPatternPostfix = false,
            bool isMainAttributeOnInterface = false,
            bool isPartialClass = false)
        {
            var baseClassDeclaration =
                $"{BaseNamesGenerator.GetAccesibility(group)}{GeneratePartialKeyword(isPartialClass)} " +
                $"class {BaseNamesGenerator.GetClassName(group, GeneratorAttributeType.Factory, isDesignPatternPostfix, isMainAttributeOnInterface)}";

            return isMainAttributeOnInterface
            ? $"{baseClassDeclaration}: {BaseNamesGenerator.GetInterfaceName(group, GeneratorAttributeType.Factory, isDesignPatternPostfix)}"
            : baseClassDeclaration;

        }
        private static string GeneratePartialKeyword(bool isPartialClass)
            => isPartialClass ? " partial" : "";

        private static string GenerateEnumDeclaration(
            IGrouping<string, TypeDeclarationSyntax> group,
            bool isDesignPatternPostfix = false,
            bool isMainAttributeOnInterface = false)
            => $"{BaseNamesGenerator.GetAccesibility(group)} enum {BaseNamesGenerator.GetClassName(group, GeneratorAttributeType.Factory, isDesignPatternPostfix, isMainAttributeOnInterface)}Type";
    }
}
