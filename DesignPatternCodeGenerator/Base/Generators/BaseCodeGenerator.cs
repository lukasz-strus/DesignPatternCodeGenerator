using DesignPatternCodeGenerator.Base.Enums;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;

namespace DesignPatternCodeGenerator.Base.Generators
{
    internal static class BaseCodeGenerator
    {
        internal static string GenerateUsingsAndNamespace(IGrouping<string, MemberDeclarationSyntax> mainGroup)
            => $@"// <auto-generated/>
{GenerateUsings(mainGroup)}

namespace {BaseNamesGenerator.GetNamespace(mainGroup)}";

        internal static string GenerateUsingsAndNamespace(
            IGrouping<string, MemberDeclarationSyntax> mainGroup,
            IGrouping<string, MemberDeclarationSyntax> additionalGroupToUsings)
            => $@"// <auto-generated/>
{GenerateUsings(mainGroup)}
{GenerateAdditionalUsing(additionalGroupToUsings)}

namespace {BaseNamesGenerator.GetNamespace(mainGroup)}";

        private static string GenerateUsings(IGrouping<string, MemberDeclarationSyntax> group)
             => $@"{string.Join("\n", BaseNamesGenerator.GetUsings(group).Select(x => $"using {x};"))}";

        private static string GenerateAdditionalUsing(IGrouping<string, MemberDeclarationSyntax> group)
        {
            return $@"{string.Join("\n", $"using {BaseNamesGenerator.GetNamespace(group)};")}";
        }
    }
}
