using DesignPatternCodeGenerator.Base.Enums;
using DesignPatternCodeGenerator.Base.Models;
using Microsoft.CodeAnalysis;
using System.Linq;

namespace DesignPatternCodeGenerator.Base.Generators
{
    internal class BaseCodeGenerator
    {
        private readonly SyntaxTokens _syntaxTokens;

        internal BaseCodeGenerator(SyntaxTokens syntaxTokens)
        {
            _syntaxTokens = syntaxTokens;
        }

        internal string GenerateUsingsAndNamespace() =>
$@"// <auto-generated/>
{string.Join("\n", _syntaxTokens.Usings.Select(x => $"using {x};"))}

namespace {_syntaxTokens.Namespace}";

        internal string GenerateDeclaration(CodeType codeType)
        {
            switch (codeType)
            {
                case CodeType.Interface:
                    return $@"{_syntaxTokens.Accessibility} interface {_syntaxTokens.InterfaceName}";
                case CodeType.Class:
                    return $@"{_syntaxTokens.Accessibility} class {_syntaxTokens.ClassName}: {_syntaxTokens.InterfaceName}";
                case CodeType.Enum:
                    return $@"{_syntaxTokens.Accessibility} enum {_syntaxTokens.ClassName}Type";
                default:
                    return "";
            }
        }
    }
}
