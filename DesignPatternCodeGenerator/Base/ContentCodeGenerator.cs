using DesignPatternCodeGenerator.Base.Enums;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;

namespace DesignPatternCodeGenerator.Base
{
    internal class ContentCodeGenerator
    {
        private readonly string _designPatternName;

        internal string Accessibility { get; }
        internal string Namespace { get; }
        internal IEnumerable<string> Usings { get; }
        internal string Key { get; }
        internal string ClassName { get; }
        internal string InterfaceName { get; }

        internal ContentCodeGenerator(IGrouping<string, ConstructorDeclarationSyntax> group, GeneratorType generatorType)
        {
            _designPatternName = SetDesignPatternName(generatorType);

            Accessibility = SetAccesibility(group);
            Namespace = SetNamespace(group);
            Usings = SetUsings(group);
            Key = group.Key;
            ClassName = Key + _designPatternName;
            InterfaceName = "I" + ClassName;
        }

        internal string GenerateUsingsAndNamespace()
        {
            string usingsAndNamespace =
$@"// <auto-generated/>
{string.Join("\n", Usings.Select(x => $"using {x};"))}

namespace {Namespace}";

            return usingsAndNamespace;
        }

        internal string GenerateDeclaration(CodeType codeType)
        {
            string declaration = codeType == CodeType.Interface
                ? $@"{Accessibility} interface {InterfaceName}"
                : $@"{Accessibility} class {ClassName}: {InterfaceName}";

            return declaration;
        }

        private string SetAccesibility(IGrouping<string, ConstructorDeclarationSyntax> group) =>
            group.First().FirstAncestorOrSelf<TypeDeclarationSyntax>().Modifiers.First().Text;

        private string SetNamespace(IGrouping<string, ConstructorDeclarationSyntax> group) =>
            group.First().FirstAncestorOrSelf<NamespaceDeclarationSyntax>()?.Name?.ToString() ??
            group.First().FirstAncestorOrSelf<FileScopedNamespaceDeclarationSyntax>().Name.ToString();

        private IEnumerable<string> SetUsings(IGrouping<string, ConstructorDeclarationSyntax> group) =>
            group.First()
                 .FirstAncestorOrSelf<CompilationUnitSyntax>()
                 .DescendantNodesAndSelf()
                 .OfType<UsingDirectiveSyntax>()
                 .Select(x => x.Name.ToString());

        private string SetDesignPatternName(GeneratorType generatorType)
        {
            switch (generatorType)
            {
                case GeneratorType.Factory:
                    return "Factory";
                default:
                    return null;
            }
        }
    }
}
