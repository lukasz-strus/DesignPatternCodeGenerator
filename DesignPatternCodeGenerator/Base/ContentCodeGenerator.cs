using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;

namespace DesignPatternCodeGenerator.Base
{
    internal class ContentCodeGenerator
    {
        internal string Accessibility { get; }
        internal string Namespace { get; }
        internal IEnumerable<string> Usings { get; }

        internal ContentCodeGenerator(IGrouping<string, ConstructorDeclarationSyntax> group)
        {
            Accessibility = SetAccesibility(group);
            Namespace = SetNamespace(group);
            Usings = SetUsings(group);
        }

        internal string GetUsingsAndNamespace()
        {
            return
$@"// <auto-generated/>
{string.Join("\n", Usings.Select(x => $"using {x};"))}

namespace {Namespace}";
        }

        private string SetAccesibility(IGrouping<string, ConstructorDeclarationSyntax> group) =>
            group.First().FirstAncestorOrSelf<TypeDeclarationSyntax>().Modifiers.First().Text;

        private string SetNamespace(IGrouping<string, ConstructorDeclarationSyntax> group) =>
            group.First().FirstAncestorOrSelf<NamespaceDeclarationSyntax>()?.Name?.ToString() ??
            group.First().FirstAncestorOrSelf<FileScopedNamespaceDeclarationSyntax>().Name.ToString();

        private IEnumerable<string> SetUsings(IGrouping<string, ConstructorDeclarationSyntax> group) =>
            group.First()
                 .FirstAncestorOrSelf<CompilationUnitSyntax>()
                 .DescendantNodesAndSelf()
                 .OfType<UsingDirectiveSyntax>()
                 .Select(x => x.Name.ToString());

    }
}
