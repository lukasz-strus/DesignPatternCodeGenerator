using DesignPatternCodeGenerator.Base.Enums;
using DesignPatternCodeGenerator.Base.Generators;
using DesignPatternCodeGenerator.Base.Models;
using FluentAssertions;
using Xunit;

namespace DesignPatternCodeGenerator.Tests.Base.Generators;

public class BaseCodeGeneratorTests
{
    private readonly SyntaxTokens _syntaxTokens = new()
    {
        ClassName = "Test",
        InterfaceName = "ITest",
        Namespace = "Test.Test",
        Accessibility = "public",
        Usings = new List<string>() { "System" }
    };

    private const string USINGS_AND_NAMESPACES = "// <auto-generated/>\r\nusing System;\r\n\r\nnamespace Test.Test";
    private const string INTERFACE_DECLARATION = "public interface ITest";
    private const string CLASS_DECLARATION = "public class Test: ITest";
    private const string ENUM_DECLARATION = "public enum TestType";

    [Theory]
    [InlineData(USINGS_AND_NAMESPACES)]
    public void GenerateUsingsAndNamespace_ForValidInputs_ReturnsCorrectString(string expected)
    {
        var codeGenerator = new BaseCodeGenerator(_syntaxTokens);

        var result = codeGenerator.GenerateUsingsAndNamespace();

        result.Should().Be(expected);
    }

    [Theory]
    [InlineData(CodeType.Interface, INTERFACE_DECLARATION)]
    [InlineData(CodeType.Class, CLASS_DECLARATION)]
    [InlineData(CodeType.Enum, ENUM_DECLARATION)]
    public void GenerateDeclaration_ForValidInputs_ReturnsCorrectString(CodeType codeType, string expected)
    {
        var codeGenerator = new BaseCodeGenerator(_syntaxTokens);

        var result = codeGenerator.GenerateDeclaration(codeType);

        result.Should().Be(expected);
    }
}
