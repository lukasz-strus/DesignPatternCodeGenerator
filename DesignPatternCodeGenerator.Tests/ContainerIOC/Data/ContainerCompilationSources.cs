namespace DesignPatternCodeGenerator.Tests.ContainerIOC.Data;

public class ContainerCompilationSources
{
    public static IEnumerable<object[]> GetSampleDataToGeneratorTests()
    {
        yield return new object[] { _inputSourceOneClass };
        yield return new object[] { _inputSourceTwoClasses };
    }

    public static IEnumerable<object[]> GetSampleDataToClassTests()
    {
        yield return new object[] { _inputSourceOneClass, _outputSourceOneClass };
        yield return new object[] { _inputSourceTwoClasses, _outputSourceTwoClasses };
        yield return new object[] { _inputSourceThreeClasses, _outputSourceThreeClasses };
    }

    private static readonly string _inputSourceOneClass =
        @"using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC;

interface IViewModel1
{
}

interface IViewModel2
{
}

interface IViewModel3 : IViewModel2
{
}

interface IViewModel4
{
}

[Container(""AddViewModels"", ObjectLifeTime.Singleton, new string[] { ""IViewModel4"" })]
public class MainViewModel : IViewModel1, IViewModel3, IViewModel4, System.IDisposable
{
    public void Dispose()
    {
    }
}";

    private static readonly string _inputSourceTwoClasses =
        @"using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC;

interface IViewModel1
{
}

interface IViewModel2
{
}

interface IViewModel3 : IViewModel2
{
}

interface IViewModel4
{
}

[Container(""AddViewModels"", ObjectLifeTime.Singleton, new string[] { ""IViewModel4"" })]
public class MainViewModel : IViewModel1, IViewModel3, IViewModel4, System.IDisposable
{
    public void Dispose()
    {
    }
}

[Container(""AddViewModels"", ObjectLifeTime.Transient)]
public class ViewModel : IViewModel1
{
}";

    private static readonly string _inputSourceThreeClasses =
        @"using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC;

interface IViewModel1
{
}

interface IViewModel2
{
}

interface IViewModel3 : IViewModel2
{
}

interface IViewModel4
{
}

[Container(""AddViewModels"", ObjectLifeTime.Singleton, new string[] { ""IViewModel4"" })]
public class MainViewModel : IViewModel1, IViewModel3, IViewModel4, System.IDisposable
{
    public void Dispose()
    {
    }
}

[Container(""AddViewModels"", ObjectLifeTime.Transient)]
public class ViewModel : IViewModel1
{
}

[Container(""AddViewModels"", ObjectLifeTime.Scoped, new string[] { ""IViewModel4"", ""IViewModel1"" })]
public class MainViewModelExtension : MainViewModel
{
}";

    private static readonly string _outputSourceOneClass =
        @"// <auto-generated/>
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC
{
    public static class AddViewModelsHostBuildersExtension
    {
        
        public static IHostBuilder AddViewModels(this IHostBuilder host)
        {
            host.ConfigureServices(services =>
            {
                services.AddSingleton<IViewModel1, MainViewModel>();
				services.AddSingleton<IViewModel3, MainViewModel>();
				services.AddSingleton<IViewModel2, MainViewModel>();
            });
            
            return host;
        }
    }
}";

    private static readonly string _outputSourceTwoClasses =
        @"// <auto-generated/>
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC
{
    public static class AddViewModelsHostBuildersExtension
    {
        
        public static IHostBuilder AddViewModels(this IHostBuilder host)
        {
            host.ConfigureServices(services =>
            {
                services.AddSingleton<IViewModel1, MainViewModel>();
				services.AddSingleton<IViewModel3, MainViewModel>();
				services.AddSingleton<IViewModel2, MainViewModel>();
				services.AddTransient<IViewModel1, ViewModel>();
            });
            
            return host;
        }
    }
}";

    private static readonly string _outputSourceThreeClasses =
        @"// <auto-generated/>
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC
{
    public static class AddViewModelsHostBuildersExtension
    {
        
        public static IHostBuilder AddViewModels(this IHostBuilder host)
        {
            host.ConfigureServices(services =>
            {
                services.AddSingleton<IViewModel1, MainViewModel>();
				services.AddSingleton<IViewModel3, MainViewModel>();
				services.AddSingleton<IViewModel2, MainViewModel>();
				services.AddTransient<IViewModel1, ViewModel>();
				services.AddScoped<IViewModel3, MainViewModelExtension>();
				services.AddScoped<IViewModel2, MainViewModelExtension>();
            });
            
            return host;
        }
    }
}";

}
