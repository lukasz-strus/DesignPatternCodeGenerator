namespace DesignPatternCodeGenerator.Tests.ContainerIOC.Data;

public class ContainerCompilationSources
{
    public static IEnumerable<object[]> GetSampleDataToGeneratorTests()
    {
        yield return new object[] { _inputSourceOneClass };
        yield return new object[] { _inputSourceTwoClasses };
    }

    public static IEnumerable<object[]> GetSampleDataToClassTests()
    {
        yield return new object[] { _inputSourceOneClass, _outputSourceOneClass };
        yield return new object[] { _inputSourceTwoClasses, _outputSourceTwoClasses };
    }

    private static readonly string _inputSourceOneClass =
        @"using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC;

interface ITest1
{

}

interface ITest2 : ITest3
{
}

interface ITest3
{

}

interface ITest123
{

}

[Container(""AddViewModels"", ObjectLifeTime.Singleton, new string[] { ""ITest123"", ""ITest1"" })]
public class Test : ITest1, ITest2, ITest123, IDisposable
{
    public void Dispose()
    {

    }
}";

    private static readonly string _inputSourceTwoClasses =
        @"using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC;

interface ITest1
{

}

interface ITest2 : ITest3
{
}

interface ITest3
{

}

interface ITest123
{

}

[Container(""AddViewModels"", ObjectLifeTime.Singleton, new string[] { ""ITest123"", ""ITest1"" })]
public class Test : ITest1, ITest2, ITest123, IDisposable
{
    public void Dispose()
    {

    }
}

[Container(""AddViewModels"", ObjectLifeTime.Transient, new string[] { ""ITest123"" })]
public class Test10 : ITest1, ITest2, ITest123
{

}";

    private static readonly string _outputSourceOneClass =
        @"// <auto-generated/>
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC
{
    public static class AddViewModelsHostBuildersExtension
    {
        
        public static IHostBuilder AddViewModels(this IHostBuilder host)
        {
            host.ConfigureServices(services =>
            {
                services.AddSingleton<ITest2, Test>();
			    services.AddSingleton<ITest3, Test>();
            });
            
            return host;
        }
    }
}";

    private static readonly string _outputSourceTwoClasses =
        @"// <auto-generated/>
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using DesignPatternCodeGenerator.Attributes.ContainerIoC;

namespace Samples.ContainerIoC
{
    public static class AddViewModelsHostBuildersExtension
    {
        
        public static IHostBuilder AddViewModels(this IHostBuilder host)
        {
            host.ConfigureServices(services =>
            {
                services.AddSingleton<ITest2, Test>();
			    services.AddSingleton<ITest3, Test>();
				services.AddTransient<ITest2, Test10>();
			    services.AddTransient<ITest3, Test10>();
            });
            
            return host;
        }
    }
}";

}
