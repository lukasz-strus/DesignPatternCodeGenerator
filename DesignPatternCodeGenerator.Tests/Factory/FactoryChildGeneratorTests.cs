using DesignPatternCodeGenerator.Base.Generators;
using DesignPatternCodeGenerator.Base.Models;
using DesignPatternCodeGenerator.Factory;
using DesignPatternCodeGenerator.Tests.Helpers;
using FluentAssertions;
using Xunit;

namespace DesignPatternCodeGenerator.Tests.Factory;

public class FactoryChildGeneratorTests
{
    [Theory]
    [InlineData(FACTORY_COMPILATION_SOURCE, FACTORY_ENUM_SOURCE)]
    internal void GenerateEnum_ForValidInput_ReturnCorrectEnum(string source, string expected)
    {
        var interfaceGroup = GeneratorTestsHelper.GetInterfaceGroup(source);
        var factoryProductsGroups = GeneratorTestsHelper.GetClassGroups(source);

        var result = FactoryEnumGenerator.GenerateEnum(interfaceGroup, factoryProductsGroups);

        result.RemoveWhitespace().Should().Be(expected.RemoveWhitespace());
    }

    private const string FACTORY_COMPILATION_SOURCE =
    @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    [Factory]
    public interface ITest { }

    [FactoryProduct]
    public class Test1 : ITest { }

    [FactoryProduct]
    public class Test2 : ITest { }

    [FactoryProduct]
    public class Test3 : ITest { }
}";

    private const string FACTORY_ENUM_SOURCE =
    @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public enum TestFactoryType
    {
	    Test1,
        Test2,
        Test3,

    }
}";
}
