namespace DesignPatternCodeGenerator.Tests.Factory.Data;

public class FactoryCompilationSources
{
    public static IEnumerable<object[]> GetSampleDataToInterfaceTests()
    {
        yield return new object[] { _inputSourceWithoutParameters, _outputInterfaceSourceWithoutParameters };
        yield return new object[] { _inputSourceWithOneParameter, _outputInterfaceSourceWithOneParameter };
        yield return new object[] { _inputSourceWithTwoParameter, _outputInterfaceSourceWithTwoParameter };
        yield return new object[] { _inputSourceWithTwoParameterAndOneProperty, _outputInterfaceSourceWithTwoParameter };
        yield return new object[] { _inputSourceWithTwoParameterAndTwoProperty, _outputInterfaceSourceWithTwoParameter };
    }

    public static IEnumerable<object[]> GetSampleDataToClassTests()
    {
        yield return new object[] { _inputSourceWithoutParameters, _outputClassSourceWithoutParameters };
        yield return new object[] { _inputSourceWithOneParameter, _outputClassSourceWithOneParameter };
        yield return new object[] { _inputSourceWithTwoParameter, _outputClassSourceWithTwoParameters };
        yield return new object[] { _inputSourceWithTwoParameterAndOneProperty, _outputClassSourceWithTwoParametersAndOneProperty };
        yield return new object[] { _inputSourceWithTwoParameterAndTwoProperty, _outputClassSourceWithTwoParametersAndTwoProperties };
        yield return new object[] { _inputSourceWithOneProduct, _outputClassSourceWithOneProduct };
        yield return new object[] { _inputSourceWithTwoProducts, _outputClassSourceWithTwoProducts };
        yield return new object[] { _inputSourceWithThreeProducts, _outputClassSourceWithThreeProducts };
    }

    public static IEnumerable<object[]> GetSampleDataToEnumTests()
    {
        yield return new object[] { _inputSourceWithOneProduct, _outputEnumSourceWithOneProduct };
        yield return new object[] { _inputSourceWithTwoProducts, _outputEnumSourceWithTwoProducts };
        yield return new object[] { _inputSourceWithThreeProducts, _outputEnumSourceWithThreeProducts };
    }

    public static IEnumerable<object[]> GetSampleDataToGeneratorTests()
    {
        yield return new object[] { _inputSourceWithoutParameters };
        yield return new object[] { _inputSourceWithOneParameter };
        yield return new object[] { _inputSourceWithTwoParameter };
        yield return new object[] { _inputSourceWithTwoParameterAndOneProperty };
        yield return new object[] { _inputSourceWithTwoParameterAndTwoProperty };
        yield return new object[] { _inputSourceWithOneProduct };
        yield return new object[] { _inputSourceWithTwoProducts };
        yield return new object[] { _inputSourceWithThreeProducts };
    }

    private static readonly string _outputEnumSourceWithOneProduct =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public enum TestFactoryType
    {
	    Test1,
    }
}";

    private static readonly string _outputEnumSourceWithTwoProducts =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public enum TestFactoryType
    {
	    Test1,
        Test2,
    }
}";

    private static readonly string _outputEnumSourceWithThreeProducts =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public enum TestFactoryType
    {
	    Test1,
        Test2,
        Test3,
    }
}";

    private static readonly string _outputClassSourceWithOneProduct =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1();
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithTwoProducts =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1();
				case TestFactoryType.Test2 :
					return new Test2();
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithThreeProducts =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1();
				case TestFactoryType.Test2 :
					return new Test2();
				case TestFactoryType.Test3 :
					return new Test3();
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithoutParameters =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1();
				case TestFactoryType.Test2 :
					return new Test2();
				case TestFactoryType.Test3 :
					return new Test3();
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithOneParameter =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type, string name)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1(name);
				case TestFactoryType.Test2 :
					return new Test2(name);
				case TestFactoryType.Test3 :
					return new Test3(name);
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithTwoParameters =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type, string name, string name2)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1(name, name2);
				case TestFactoryType.Test2 :
					return new Test2(name, name2);
				case TestFactoryType.Test3 :
					return new Test3(name, name2);
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithTwoParametersAndOneProperty =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    private readonly string _name3;

		public TestFactory(string name3)
        {
	        _name3 = name3;
        }

	    public ITest Create(TestFactoryType type, string name, string name2)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1(name, name2, _name3);
				case TestFactoryType.Test2 :
					return new Test2(name, name2, _name3);
				case TestFactoryType.Test3 :
					return new Test3(name, name2, _name3);
                default :
                    throw new Exception($""Type { type } is not handled"");
            }    
        }

    }
}";

    private static readonly string _outputClassSourceWithTwoParametersAndTwoProperties =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public class TestFactory: ITestFactory
    {
	    private readonly string _name3;
		private readonly string _name4;

        public TestFactory(string name3, string name4)
        {
	        _name3 = name3;
			_name4 = name4;
        }

	    public ITest Create(TestFactoryType type, string name, string name2)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1(name, name2, _name3, _name4);
				case TestFactoryType.Test2 :
					return new Test2(name, name2, _name3, _name4);
				case TestFactoryType.Test3 :
					return new Test3(name, name2, _name3, _name4);
                default :
                    throw new Exception($""Type {type} is not handled"");
            }    
        }
    }
}";

    private static readonly string _outputInterfaceSourceWithoutParameters =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public interface ITestFactory
    {
        public ITest Create(TestFactoryType type);
    }
}";

    private static readonly string _outputInterfaceSourceWithOneParameter =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public interface ITestFactory
    {
        public ITest Create(TestFactoryType type, string name);
    }
}";

    private static readonly string _outputInterfaceSourceWithTwoParameter =
        @"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{
    public interface ITestFactory
    {
        public ITest Create(TestFactoryType type, string name, string name2);
    }
}";

    private static readonly string _inputSourceWithoutParameters =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {

    }

    [FactoryProduct]
    public class Test1 : ITest { }

    [FactoryProduct]
    public class Test2 : ITest { }

    [FactoryProduct]
    public class Test3 : ITest { }
}";

    private static readonly string _inputSourceWithOneParameter =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {
        [Parameter]
        public string Name { get; set; }    
    }

    [FactoryProduct]
    public class Test1 : ITest 
    { 
        public string Name { get; set; } 

        public Test1(string name, int horsePower)
        {
            Name = name;
        }
    }

    [FactoryProduct]
    public class Test2 : ITest 
    { 
        public string Name { get; set; } 

        public Test2(string name, int horsePower)
        {
            Name = name;
        }
    }

    [FactoryProduct]
    public class Test3 : ITest 
    { 
        public string Name { get; set; } 

        public Test3(string name, int horsePower)
        {
            Name = name;
        }
    }
}";

    private static readonly string _inputSourceWithTwoParameter =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {
        [Parameter]
        public string Name { get; set; }

        [Parameter]
        public string Name2 { get; set; }  
    }

    [FactoryProduct]
    public class Test1 : ITest 
    { 
        public string Name { get; set; } 

        public string Name2 { get; set; } 

        public Test1(string name, string name2)
        {
            Name = name;
            Name2 = name2;
        }
    }

    [FactoryProduct]
    public class Test2 : ITest 
    { 
        public string Name { get; set; } 

        public string Name2 { get; set; } 

        public Test2(string name, string name2)
        {
            Name = name;
            Name2 = name2;
        }
    }

    [FactoryProduct]
    public class Test3 : ITest 
    { 
        public string Name { get; set; } 

        public string Name2 { get; set; } 

        public Test3(string name, string name2)
        {
            Name = name;
            Name2 = name2;
        }
    }
}";

    private static readonly string _inputSourceWithTwoParameterAndOneProperty =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {
        [Parameter]
        public string Name { get; set; }

        [Parameter]
        public string Name2 { get; set; }  

        public string Name3 { get; set; }
    }

    [FactoryProduct]
    public class Test1 : ITest 
    { 
        public string Name { get; set; }

        public string Name2 { get; set; }

        public string Name3 { get; set; }

        public Test1(string name, string name2, string name3)
        {
            Name = name;
            Name2 = name2;
            Name3 = name3;
        }
    }

    [FactoryProduct]
    public class Test2 : ITest 
    { 
        public string Name { get; set; } 

        public string Name3 { get; set; }

        public Test2(string name, string name2, string name3)
        {
            Name = name;
            Name2 = name2;
            Name3 = name3;
        }
    }

    [FactoryProduct]
    public class Test3 : ITest 
    { 
        public string Name { get; set; } 

        public string Name3 { get; set; }

        public Test3(string name, string name2, string name3)
        {
            Name = name;
            Name2 = name2;
            Name3 = name3;
        }
    }
}";

    private static readonly string _inputSourceWithTwoParameterAndTwoProperty =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {
        [Parameter]
        public string Name { get; set; }

        [Parameter]
        public string Name2 { get; set; }  

        public string Name3 { get; set; }

        public string Name4 { get; set; }
    }

    [FactoryProduct]
    public class Test1 : ITest 
    { 
        public string Name { get; set; }

        public string Name2 { get; set; }

        public string Name3 { get; set; }

        public string Name4 { get; set; }

        public Test1(string name, string name2, string name3, string name4)
        {
            Name = name;
            Name2 = name2;
            Name3 = name3;
            Name4 = name4;
        }
    }

    [FactoryProduct]
    public class Test2 : ITest 
    { 
        public string Name { get; set; } 

        public string Name2 { get; set; }

        public string Name3 { get; set; }

        public string Name4 { get; set; }

        public Test2(string name, string name2, string name3, string name4)
        {
            Name = name;
            Name2 = name2;
            Name3 = name3;
            Name4 = name4;
        }
    }

    [FactoryProduct]
    public class Test3 : ITest 
    { 
        public string Name { get; set; } 

        public string Name2 { get; set; }

        public string Name3 { get; set; }

        public string Name4 { get; set; }

        public Test3(string name, string name2, string name3, string name4)
        {
            Name = name;
            Name2 = name2;
            Name3 = name3;
            Name4 = name4;
        }
    }
}";

    private static readonly string _inputSourceWithOneProduct =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {

    }

    [FactoryProduct]
    public class Test1 : ITest { }
}";

    private static readonly string _inputSourceWithTwoProducts =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {

    }

    [FactoryProduct]
    public class Test1 : ITest { }

    [FactoryProduct]
    public class Test2 : ITest { }
}";

    private static readonly string _inputSourceWithThreeProducts =
        @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace Test.Test
{

    [Factory]
    public interface ITest
    {

    }

    [FactoryProduct]
    public class Test1 : ITest { }

    [FactoryProduct]
    public class Test2 : ITest { }

    [FactoryProduct]
    public class Test3 : ITest { }
}";
}
