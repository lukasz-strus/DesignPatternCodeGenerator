using DesignPatternCodeGenerator.Base.Generators;
using DesignPatternCodeGenerator.Base.Models;
using DesignPatternCodeGenerator.Factory;
using DesignPatternCodeGenerator.Tests.Helpers;
using FluentAssertions;
using Xunit;

namespace DesignPatternCodeGenerator.Tests.Factory;

public class FactoryContentGeneratorTests
{
    [Theory]
    [InlineData(FACTORY_COMPILATION_SOURCE, INTERFACE_FACTORY_SOURCE)]
    internal void GenerateInterface_ForValidInputs_ReturnInterface(string inputSource, string interfaceSource)
    {
        var codeGenerator = new BaseCodeGenerator(_syntaxTokens);
        var interfaceGroup = GeneratorTestsHelper.GetInterfaceGroup(inputSource);

        var result = FactoryContentGenerator.GenerateInterface(codeGenerator, interfaceGroup);

        result.RemoveWhitespace()
            .Should()
            .Be(interfaceSource.RemoveWhitespace());
    }

    [Theory]
    [InlineData(FACTORY_COMPILATION_SOURCE, CLASS_FACTORY_SOURCE, FACTORYCHILD_COMPILATION_SOURCE)]
    internal void GenerateClass_ForValidInputs_ReturnInterface(string inputSource, string classSource, string childSource)
    {
        var codeGenerator = new BaseCodeGenerator(_syntaxTokens);
        var interfaceGroup = GeneratorTestsHelper.GetInterfaceGroup(inputSource);
        var childGroups = GeneratorTestsHelper.GetClassGroups(childSource);

        var result = FactoryContentGenerator.GenerateClass(codeGenerator, interfaceGroup, childGroups);

        result.RemoveWhitespace()
            .Should()
            .Be(classSource.RemoveWhitespace());
    }

    private readonly SyntaxTokens _syntaxTokens = new()
    {
        ClassName = "Test",
        InterfaceName = "ITest",
        Namespace = "Test.Test",
        Accessibility = "public",
        Usings = new List<string>() { "System" }
    };

    private const string FACTORY_COMPILATION_SOURCE =
    @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace DesignPatternCodeGenerator.Tests.Data
{

    [Factory]
    public interface ITest
    {

    }

    [FactoryChild]
    public class Test : ITest
    {

    }
}";

    private const string INTERFACE_FACTORY_SOURCE =
    @"// <auto-generated/>
using System;

namespace Test.Test
{
    public interface ITest
    {
        public ITest Create(TestFactoryType type);
    }
}";

    private const string FACTORYCHILD_COMPILATION_SOURCE =
    @"using DesignPatternCodeGenerator.Attributes.Factory;
using System;

namespace DesignPatternCodeGenerator.Tests.Data
{
    [Factory]
    public interface ITest { }

    [FactoryChild]
    public class Test1 : ITest { }

    [FactoryChild]
    public class Test2 : ITest { }

    [FactoryChild]
    public class Test3 : ITest { }
}";

    private const string CLASS_FACTORY_SOURCE =
    @"// <auto-generated/>
using System;

namespace Test.Test
{
    public class Test: ITest
    {
	    

		public TestFactory()
        {
	        
        }

	    public ITest Create(TestFactoryType type)
        {
            switch (type)
            {
                case TestFactoryType.Test1 :
					return new Test1();
				case TestFactoryType.Test2 :
					return new Test2();
				case TestFactoryType.Test3 :
					return new Test3();
                default :
                    throw new Exception($""Shape type { type } is not handled"");
            }    
        }

    }
}";
}
