using DesignPatternCodeGenerator.Prototype;
using DesignPatternCodeGenerator.Tests.Helpers;
using FluentAssertions;
using Xunit;

namespace DesignPatternCodeGenerator.Tests.Prototype;

public class PrototypeContentGeneratorTests
{
    [Theory]
    [InlineData(PROTOTYPE_COMPILATION_SOURCE, EXPECTED_COMPILATION_SOURCE)]
    internal void GenerateClass_ForValidInputs_ReturnInterface(string inputSource, string expectedSource)
    {
        var classGroup = GeneratorTestsHelper.GetClassGroup(inputSource);

        var result = PrototypeContentGenerator.GenerateClass(classGroup);

        result.Should().Be(expectedSource);
    }

    private const string PROTOTYPE_COMPILATION_SOURCE =
@"using DesignPatternCodeGenerator.Attributes.Prototype;

namespace Test.Test
{
    [Prototype]
    public partial class Person 
    { 
        public string Name {get; set;}
        
        public Address Address {get; set;}
    }

    public class Address
    {
        public string City { get; set; }
    }
}";

    private const string EXPECTED_COMPILATION_SOURCE =
@"// <auto-generated/>
using DesignPatternCodeGenerator.Attributes.Prototype;

namespace Test.Test
{    
    public partial class Person 
    { 
        public Person ShallowCopy()
        {            
            return (Person)this.MemberwiseClone();
        }

        public Person DeepCopy()
        {
            Person clone = (Person)this.MemberwiseClone();
            
            clone.Address = new Address()
            {
                City = Address.City
            }

            return clone;
        }
    }
}";
}
